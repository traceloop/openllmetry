[tool.coverage.run]
branch = true
source = ["traceloop/sdk"]

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:"]
show_missing = true

[tool.poetry]
name = "traceloop-sdk"
version = "0.45.1"
description = "Traceloop Software Development Kit (SDK) for Python"
authors = [
    "Gal Kleinman <gal@traceloop.com>",
    "Nir Gazit <nir@traceloop.com>",
    "Tomer Friedman <tomer@traceloop.com>",
]
repository = "https://github.com/traceloop/openllmetry"
documentation = "https://traceloop.com/docs/openllmetry"
license = "Apache-2.0"
readme = "README.md"

[[tool.poetry.packages]]
include = "traceloop/sdk"

[tool.poetry.dependencies]
python = ">=3.10,<4"
opentelemetry-api = "^1.28.0"
opentelemetry-sdk = "^1.28.0"
opentelemetry-exporter-otlp-proto-http = "^1.28.0"
opentelemetry-exporter-otlp-proto-grpc = "^1.28.0"
colorama = "^0.4.6"
tenacity = ">=8.2.3, <10.0"
pydantic = ">=1"
jinja2 = "^3.1.5"
deprecated = "^1.2.14"
posthog = ">3.0.2, <4"
aiohttp = "^3.11.11"

[tool.poetry.group.dev.dependencies]
autopep8 = "^2.2.0"
flake8 = "7.0.0"
pytest = "^8.2.2"
pytest-sugar = "1.0.0"

[tool.poetry.group.test.dependencies]
openai = "^1.31.1"
vcrpy = "^7.0.0"
pytest-recording = "^0.13.1"
pydantic = "<3"
pytest-asyncio = "^0.23.7"
anthropic = "^0.25.2"
langchain = "^0.2.5"
langchain-openai = "^0.1.15"
pandas = ">=1.0.0"

[tool.poetry.extras]
datasets = ["pandas"]

[build-system]
 [tool.poetry.extras]
llm = [
    "../opentelemetry-instrumentation-openai",
    "../opentelemetry-instrumentation-anthropic",
    "../opentelemetry-instrumentation-cohere",
    "../opentelemetry-instrumentation-groq",
    "../opentelemetry-instrumentation-ollama",
    "../opentelemetry-instrumentation-mistralai",
    "../opentelemetry-instrumentation-bedrock",
    "../opentelemetry-instrumentation-sagemaker",
    "../opentelemetry-instrumentation-replicate",
    "../opentelemetry-instrumentation-vertexai",
    "../opentelemetry-instrumentation-watsonx",
    "../opentelemetry-instrumentation-google-generativeai",
    "../opentelemetry-instrumentation-alephalpha"
]
frameworks = [
    "../opentelemetry-instrumentation-langchain",
    "../opentelemetry-instrumentation-llamaindex",
    "../opentelemetry-instrumentation-crewai",
    "../opentelemetry-instrumentation-haystack",
    "../opentelemetry-instrumentation-transformers",
    "../opentelemetry-instrumentation-together"
]
vectorstores = [
    "../opentelemetry-instrumentation-pinecone",
    "../opentelemetry-instrumentation-qdrant",
    "../opentelemetry-instrumentation-weaviate",
    "../opentelemetry-instrumentation-chromadb",
    "../opentelemetry-instrumentation-lancedb",
    "../opentelemetry-instrumentation-milvus",
    "../opentelemetry-instrumentation-marqo"
]
cloud = [
    "../opentelemetry-instrumentation-bedrock",
    "../opentelemetry-instrumentation-vertexai",
    "../opentelemetry-instrumentation-sagemaker",
    "../opentelemetry-instrumentation-watsonx",
    "../opentelemetry-instrumentation-google-generativeai"
]
minimal = [
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-exporter-otlp-proto-grpc",
    "colorama",
    "tenacity",
    "pydantic",
    "jinja2",
    "deprecated",
    "posthog",
    "aiohttp"
]
all = [
    "llm",
    "frameworks",
    "vectorstores",
    "cloud",
    "logging",
    "requests",
    "sqlalchemy",
    "urllib3",
    "threading",
    "redis",
    "semantic-conventions-ai",
    "../opentelemetry-instrumentation-openai-agents",
    "../opentelemetry-instrumentation-mcp",
    "../opentelemetry-instrumentation-groq"
]
logging = ["opentelemetry-instrumentation-logging"]
requests = ["opentelemetry-instrumentation-requests"]
sqlalchemy = ["opentelemetry-instrumentation-sqlalchemy"]
urllib3 = ["opentelemetry-instrumentation-urllib3"]
threading = ["opentelemetry-instrumentation-threading"]
redis = ["opentelemetry-instrumentation-redis"]
semantic-conventions-ai = ["opentelemetry-semantic-conventions-ai"]
mistralai = ["../opentelemetry-instrumentation-mistralai"]
openai = ["../opentelemetry-instrumentation-openai"]
openai-agents = ["../opentelemetry-instrumentation-openai-agents"]
ollama = ["../opentelemetry-instrumentation-ollama"]
anthropic = ["../opentelemetry-instrumentation-anthropic"]
cohere = ["../opentelemetry-instrumentation-cohere"]
crewai = ["../opentelemetry-instrumentation-crewai"]
google-generativeai = ["../opentelemetry-instrumentation-google-generativeai"]
pinecone = ["../opentelemetry-instrumentation-pinecone"]
qdrant = ["../opentelemetry-instrumentation-qdrant"]
langchain = ["../opentelemetry-instrumentation-langchain"]
lancedb = ["../opentelemetry-instrumentation-lancedb"]
chromadb = ["../opentelemetry-instrumentation-chromadb"]
transformers = ["../opentelemetry-instrumentation-transformers"]
together = ["../opentelemetry-instrumentation-together"]
llamaindex = ["../opentelemetry-instrumentation-llamaindex"]
milvus = ["../opentelemetry-instrumentation-milvus"]
haystack = ["../opentelemetry-instrumentation-haystack"]
bedrock = ["../opentelemetry-instrumentation-bedrock"]
sagemaker = ["../opentelemetry-instrumentation-sagemaker"]
replicate = ["../opentelemetry-instrumentation-replicate"]
vertexai = ["../opentelemetry-instrumentation-vertexai"]
watsonx = ["../opentelemetry-instrumentation-watsonx"]
weaviate = ["../opentelemetry-instrumentation-weaviate"]
alephalpha = ["../opentelemetry-instrumentation-alephalpha"]
marqo = ["../opentelemetry-instrumentation-marqo"]
groq = ["../opentelemetry-instrumentation-groq"]
mcp = ["../opentelemetry-instrumentation-mcp"]
full = [
    "opentelemetry-instrumentation-logging",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-sqlalchemy",
    "opentelemetry-instrumentation-urllib3",
    "opentelemetry-instrumentation-threading",
    "opentelemetry-instrumentation-redis",
    "opentelemetry-semantic-conventions-ai",
    "../opentelemetry-instrumentation-mistralai",
    "../opentelemetry-instrumentation-openai",
    "../opentelemetry-instrumentation-openai-agents",
    "../opentelemetry-instrumentation-ollama",
    "../opentelemetry-instrumentation-anthropic",
    "../opentelemetry-instrumentation-cohere",
    "../opentelemetry-instrumentation-crewai",
    "../opentelemetry-instrumentation-google-generativeai",
    "../opentelemetry-instrumentation-pinecone",
    "../opentelemetry-instrumentation-qdrant",
    "../opentelemetry-instrumentation-langchain",
    "../opentelemetry-instrumentation-lancedb",
    "../opentelemetry-instrumentation-chromadb",
    "../opentelemetry-instrumentation-transformers",
    "../opentelemetry-instrumentation-together",
    "../opentelemetry-instrumentation-llamaindex",
    "../opentelemetry-instrumentation-milvus",
    "../opentelemetry-instrumentation-haystack",
    "../opentelemetry-instrumentation-bedrock",
    "../opentelemetry-instrumentation-sagemaker",
    "../opentelemetry-instrumentation-replicate",
    "../opentelemetry-instrumentation-vertexai",
    "../opentelemetry-instrumentation-watsonx",
    "../opentelemetry-instrumentation-weaviate",
    "../opentelemetry-instrumentation-alephalpha",
    "../opentelemetry-instrumentation-marqo",
    "../opentelemetry-instrumentation-groq",
    "../opentelemetry-instrumentation-mcp"
]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
