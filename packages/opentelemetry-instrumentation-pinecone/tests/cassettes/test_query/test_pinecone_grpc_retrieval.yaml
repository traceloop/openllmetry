interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.31.0
      api-key:
      - 4fc603f7-f097-425f-8bef-e0578aa7db49
    method: GET
    uri: https://controller.gcp-starter.pinecone.io/actions/whoami
  response:
    body:
      string: '{"project_name":"90c5d9e","user_name":"","user_label":""}'
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Length:
      - '57'
      Date:
      - Mon, 12 Feb 2024 16:43:46 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      X-Cloud-Trace-Context:
      - 3619d53dac7e238a1d3145cd405f765d
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - '*'
      content-type:
      - application/json
      vary:
      - origin,access-control-request-method,access-control-request-headers
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["Which training method should I use for sentence transformers
      when I only have pairs of related sentences?"], "model": "text-embedding-ada-002",
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '184'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.12.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.12.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.1
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA1R6Ww+yTLPl/fcrnry3zI6IShffHQIix24FRZxMJoCCoogcuoHe2f99gs9kDjcm
        YhvopmrVWqvqP//1588/dVres/6ff//55/3s+n/+23ztlvTJP//+89//9efPnz//+fv8/1beq/R+
        uz0/xW/578fn53Yf//n3H/H/XPm/i/79558CypJpKencMSRqoRiZiumid7S2iybPg+TthMT7DhvU
        Z41AkUeHgoX291ROJ+O8Vu6bzsfKoX+Vw9I/ZsDe1YmYK/EaDu1SOqESB3uyo36HxvvbnkDRz4SO
        9mOXjq9ciOATiBpTDemE+OjSGFgYLdi2mQZ3tAZbhilACfHf170+1Y9rAtPZYmzfr7DOg1EG+Rle
        EdG4+i4H/L6pkPtSwnzsPfnUNmUGwnbhYeivpiv1GhORKBUS0UejT1uX2ubf9bjXPyF/BuIaqWn1
        INYLTFeMjnmEPt49Z7bYF2VvnBRPvu91QpznbtfypJIrtH+AR+Fcd+U79CuKquv4IETs9+3UunEC
        t2mjMW8j0JDRRF+j/fZZEix7BuJh4sbg1eKH+UEzoO5h+QXc337JdpU5tc2B1wHAuJPZdogtPsnI
        K5As4hsVV53jjnJ0UEGWdmfihiop2YD8AsY7VYm7EPO0G48XEXrHMcn2+FyHQx5fX1B49wtxun7b
        8nM6AozwWNE8WTzKAWp5jfJd69FxcZ9auk22a+CkvrOT24PLPOEhw+GjLoiZmGHZqbcxgMEXKXPi
        3HfZyb06aL9kQPxhq+u83TgYjqzXsGgPDI1MgDUk3cJgzuiSdjjczQCyZ+yTSEkml7eDt4a9fTkx
        X97Zpbg0Mgud7CBmJj3VLlcjqkEBssp89NpzOixfhnKtU0yMdv/gn2l5qEDa7iaiv/K32943W0G5
        LI4P5iEkt7RLLjHscMQoOuplOFy03gQZdExLx//yAcbBA/9zf2F5ZAYf2XJRQfkKfeKI9NQOMZcn
        5OpLi8KmUEMJdcEBDdLOZmq6XZZUiI4B6N/zganh/dByLEg1EG9f4YXeSW6f37gKr0hwiW9UTTjE
        jXKXH6lxIrtF5KRiHh8r2EvmlVj3KXanWFjW4OThEQ9R+WlZYvoddJfcYtg7NO10Mm4yQB/ZmBuf
        Yzgl+eoEfX1KsPQ7r7qSJViu9JbN8ViOaZl6yCicbI73ffq9GycZmkk0iWkLZjo+95O2mO/HtqIk
        8c8+HaliHMEiF98YwyGjSYUK42gTb5usXR7T7UlxYf/EsBP6tGsF3oBg4AfZVydb56a9MGFV2DHZ
        KmnuMpXeXmAF25hokW+h1W5z9yDy7i7bfd1vycPSonB57DBzroIbDuulVAF9qHfin9mH95RmJtje
        Y09IfmPlyJNtA5JbnEmy50443jIjQ0un1Ynlu13J7pstQH3RU0YmU2hpN2HYwOZoESKMVGfisj+h
        YHidye76cFLum7sMjtdLQZPkWbT9qllg9AVVZr5Qrlr2y9fzpNdY7HRBH+d8h/w6XrHcmHHbhzR9
        AW6/CnGlKXP5J0o0uFXvihjy+HCn1NpPULfPHe4QSsqPT7RJiSWzJ16O33ovkLuGbnLP6VSwWzt+
        bOUEhRHaeDgvgpCjoykhcj8h4qiUl+Ny2glAmvrCbnUsIVoJyhrUVVlQ3mmNOylGVIMeKJTZ7T1t
        eTEiLD+2KiZnDzR3dY2Ok3IMrx/6XGu2zsPNPduYZUTohr+XfNhZO01hrEmI5r473k3J2YLbQ3WY
        e34c084z0hilV2rTlbJAaS8LRQLtUUvItqB227ubUIDjjoRY/Bo4HAr1qYGIDykLd65ZjsjUAdzG
        a/BgJ43bWTZ6ofk72QfmqRysSRdgf64H5uccp8NoQ4RyBVVYuj6FcEotMiBD9p5Md3wbUXcvT5sg
        2L7Ydjov3fZALgX0UkGJXmVjSC2hqCGzxzOd1sXKHa/a9SWTZ27jemOEIT+Q/AlGpmGmXo1vyj3h
        u0at92B0rRY3dxwGp5bznAV0muslL8szhZfTMLbXsmU6VflTgvEpYhapULo8JbqmYAUFxNkNEh9O
        cWWCq68srOj3vB0DU8dQ9YgS79IW+uDyqYAyISZT87fDx7dlTkqqiBFdvj5iyCo/69BVtUTiS89X
        O1Jiq0hpwcTj1X21f/PtE6d34n8inna1SAZkZbs70cqoSrvzF8voyfqImTxyUymqxpMSrnSdImXF
        dbbc16rMR0UlmmPitvNFcgAptdfE029tORKOJjQIwYW43lbVl72pdyB/0Ja4vuCl/NF0d3mOJ+Y+
        zWs5wa3WwN9riHjV2OjTr57svH3C8HOhtqtHqQoKeOsCr67fazmSU0H/5vOxPuJ28u3HSak1hPEm
        OLV6qx1GQ8Er5UqIP2R8onz5RJtlVWAZjpuWLXw1U963ZMP8vtiG/MQfBfz4x1xvOWuEhYVku+vZ
        LsrCcDovyxdcHNYS72hcwjl+Y3AL64XrXf1pKXn0DVouvA25FRcdDZ4RxoqV7e+YZ7GDpusHm4j1
        1x2zXlDpPR83GJkXlRPSlNe2XQ87B5Dcunjz1rfplBvbv/WH7NX8q49fw4rlb+NoxHTR1LLf/p7p
        x8bKJwrDTr1tAljH14muSzFNqXWSMtTi0WDaznDDIVU8CQ4fbUHsW7LUu9q/YrQTppjsOucajnyT
        dbA1jSMz1xKg6UVvBqBTbTIv3DdoEGFd/cVHPTq93GEMxkZJ9dOHxCc6lnxIpwy8JJRw+sGGTp28
        iYCHQ0f003Eox1V31FB22zwJNj73kAmvtQZlEJ+x7Ky36TKMOg0gXuWETN4OjatmhUE9Fim731aS
        25nDLYHQ6J74NL3ychzIbUKtCSHR6+uN06ouHLSgPKObj9qX+XJfqMr8/OTSr7A72nZhKt+P3GPp
        bBxCPhraWvGqd0DuZ6l0BxbT12brtj2zo2njjmsOT9nYr7fsqjUt52lsRbCwpgvTzNJuuWyXEfKv
        wYGCCo3eh6t4/ds/XXPVa6VjOnQorEVGV4v7pm0m4gSwSxqXGOao6lIpPCwlBrXCaC/vSmkZZyeY
        +SPZ30fDXTJBlGVJEaW//KvvFXxC+++gsP3ivimnQ/MEpDJKMV/br3Cy/U+H5njHg7Cxw/E9XCxw
        tIVEl9rJdLtNXkvwOFsphpb3IbvHZwPgqNF5P992sJo6A7a6ecxsyej2U81lqPbyl04n2rR8l+gO
        gk1oMRJGy7AbHqUMvXDO2Y7c9HK5eBwalLufHZ62i1M6PBPVgensMApS+k0HFlcVREmTs93pukD0
        piUS4JwK8/sYwvFt1y9AxWdH7Fo7ut0tKjW4Xw8vvBy9rB3S5TeCxOgaOriobXvbwgFUmSYR/+gG
        7WqbtxEyF6FPN11lhlLbtHeE/fxL9ldWoMGIVgEog3ki6vFhhMuCphJ6f+n5L/41GzduIBiqM10x
        UU75dGo7ZI+GwFLxmLTD4+iIaOh0jRBbMvTV4TCekFOmOTUcfOPMpbYhU2S86EdZpCG33b6GjyQQ
        YgyfMOTX6Dog8xtYxAvKczt8b5MG2n06MXvGK+683QH0YEHZ7vpownFj3BIUCNGCaWH3cTmOVUNR
        RzDYaa6Py4uFC4AxuxD9GoZIXK8OMdBTr7GfHhmrZBtDEMRb5ozsxcdhPwXy/U1KOsdLOi03tofW
        +Nwy80VJK/rLh6GkSr7Bi1pbu59mLxawSL6EmLG9T/lhY1M01teGbZuT5i4DZSfC4WztyVXHD51v
        NloGXvG9kizHO3fwyuqO+huSiJ3Kejtu3dKBYy86LBJjykeLnFV0ejw5sS1HCaduMgWATumI2Q8B
        YtMyfoGkSBIxF7d32xnx0VRivozxwg4oGmgt1+i8f6yJ9RXskAba5wRbyb0xdTpt3WkUvjHM+8PD
        Be7lwDbhHQVdtifn8AJhN6gLdbM53kNmvIqNPn61qgJP9QfMVR1m/VCpIAj0QDwjJ+43CaYEPd/f
        Ax0/vAi7S3kUUPG83bBojqorHWzBRPX3MBAnV2l5kzQqoVGL3+zWF4+U8lVQw+s+AOa73SJlud1I
        aNY3GLZJ7E6S/TSVmX/j6t5YaJiQo8Jcr4jTviM+CdH1AMdRiIlxkq68Q7lSwXLp8L94MUg3OUDt
        Ss+JtXifENfVXoPf+f/we96vBjJjEzMrv+djpLYaWvBgT7agHF2uNC8BCi+7sEtGD+X4FMQanRQJ
        z/XcbdlrGZ8QjPcL23mSzIfSBhO+N7EiP73FSuQf0DlcnWa8erS9hNwD9LeNNJ+/UI6RWqpKJpxd
        zFVbD7kSKLE8nxeVLvsSTf7jIEMWmSPzvtJWl/QAObCExYs+vOLs0p37SqD6LJb0Q/YG/9UP+ccH
        pqsXt8y51QE6KSImwfKxD0cpHTBcjHGia9JRl+bpICAeTh1zRCcPu3tenGD6HoCl6pKi6a/e8/YJ
        XulqM/NNVwDiYIpHHXkl+9yUAtL2s6XLaXy6fHlbDhBqN5+uq7PiTkV3HdBCfdvsb7zYdm3AdcrP
        /vgeOkRFctFAdgWN7OTT51dfCigkYU+X5XtAvXySMESjqhFsmtBOP/xaenJMlVnPMDc6Fj9+QGz1
        s055P6I76trPma5KEuhjOWgxag9fhamBnIbj2cwFNNcbLBNRSZvd6UFh5mt4hdS2HHd+dYfntTsS
        7REGnOPYMkG/xUe2e9lVOKJqEJXrXnljXoDqiultM8EnaTgzrdxyp72fCKAoksDmeETdJ3Mz0FYa
        I+7lZSAxpywCaqUV20fNF41BNRggnf0FHk6aqX+XzTOD+X0QLWolNNnvy0GRYYvxZuv2LX129Clr
        INTEpuXUDmE9WYil7kAnxfDSSazrRKGB5BB7NMSQm6V6h/v7pZJrNF31sYVNhXDeCQRLZVzWsz8A
        f/UMuZVlf7qT4ofnzLqQ0B2waQP6jFpElxfVasfFI65RAY+SaKpmud9A8SXoIfuwPb+ZJT/WSo0k
        9Hn8rYdMj7MKHcP0w/znaXB7dEMFbHdMpMqst0asUQPd6CRSWG+f7o9vKr7BKyy8E+RW22Qrw9jU
        Czrm1Z0zB1AkeyeaYGWrv8OBqs8AcslcErO0JN7V/hErYz3sieOcPHd6VeMLRMM7U3nPm5Rv66IG
        fIQTOx/Xgj4pfgho7WWcnRaEuXy5rzU05KwibkfP7eg13w5mPUS+urVBg/B4WZDpqwyLbp/p00DV
        F6rowSWXtOt1ykCWwD/uNTqaGQ6Hc1NT2S2c18+PKpmppS/E9rHK4nNgInHWE3AfiwWzRl1Nh61p
        dyCf2w6L7M1Qy9/eE/Z8aZDdqhfcDsWBCeq7qdk2eqHy+x4HULKt8GK621n6X707xxPZ4Q1NOzi6
        EaTL1sLDQWEuG1I5gxmv6Hpj8HAknE9wzXYT5sdA/fHzBJz8eCTqKjLS4VNSQCdUbehUSxc+DuQ8
        we5Q7YiV8jqcVkf/BTFfxbTjUZD2qWFZyDk+P8Rnt74c2rx4wSfI34xEaRfy/UQytDZqjWTfYcP5
        zA9QJj0TPC5Uoxyf+fcFvYF9+uP7kkItCd58yGY/dJPSsRolRRAbh+EWQcmDcQLlh2/HvaqXy59e
        xv7tO/uXGhevKAoAPz4rpl9DjrjcHDBo4pgw4l12aP6/gPbfScF8YXHUOY2CofTUCcspurSDJsgy
        et/iDYUZf8VnYllQaxvMdjN/XM37gaZ4jeR4NJqQb/PyhI695BDrFQ9oHD67CNWLOmDmAoXluM48
        QLMfxO5nSdd5VN4yZFXumznBOXe56R5kZBs0YlY07vThkBcmSr/njtgK05FoDucE9K0hETPYqeW4
        yAVR7usoYfqi+7qjm1jyX36JGj/kowaDpPz4UFYcrHYQQ5zIcmEe8MrZPdq+WzYSKpq6pZNZfssu
        jxYDeNUnoJtLhFMaCbUMXTm9yHaIazQ9qXVCiUEb2kPVhmO8yTC0phBivuhsfdbHazkynwHTZ/7N
        v7Fawate6cwlaN2O1rCV0W99GqqsHcdVZcmuzbdYWepmOnlxWkEf7XfM/qh+K3uDbiHlkmeEsDcg
        nka0QNf94k2s23WrSxM9n2D6JAZT/fXanVSLBPLPz8BLZ9suq8ROfvyWWU7T8OG5CfHPX8QCanV9
        ZPlXBI9OBfHwbt8uQ59SefYjqLS4vcuB0CRCsj7jU9zr5Zxf0c8vZPtqWrm0d3sLHsHGpIsNaxA/
        bLYdEp7JkpjyGen84V4TVCuxwsx7Y/Hpx3c25cWldOuo7Y9vAPMWGdOjadL/+mOlvnrhx4x3fX5a
        dlA0TcuI7Meoy1ddDa7kfvFk2c9wIpszRryXJqI+3LLksXFxwLgOG0Lejyhs7HceQHd8EOKOgYNY
        k3fmj78x9dPt3KEb7OSnF5h52WblVN4ggPbQKnQ4KMTl+2l///EPoheg6uyn98Y6bfAyqx4hzRIn
        RnN9ZkHBlHLyDoMJ07KKiboNGe+nXKj+6oHnznDToduPmsLTz40u72VfDi9kT+hGB5Foz+mo17oZ
        3eXS0ybs5C+dD+lJvMP7Ue6JmX3O6Vf5+BUKpAITLFZdSlNr/zdeiZ3BR++nxyEBUqcaXsUOCof7
        3SzW+m0rYmXmm+MYp+aGjY+QGN7S5HwfiDHMfhTubN1Ix213UOGRKR5zF+Ii/PFjyApnjYVe34ds
        zx8BzM/H7Cpbp9L6UcVIGYwT2V5do5y6AMmwdL468+qLxofh0a6B7/MDMzyWl3zRpU9QrxePqXO9
        l55d9QTiZToeMrsIWyoPA6yq/ZEuY61z+bVjBZz7TUJ8/WWi8ccPtt0+mvHooQ/PR1lDIQxrFize
        Pp/1rAijBCmx+GvL+XQqqeKPRUt2Y1AibtorE/Rl0zGfbuKUr2JVAna878l2K6ipWIXYQT7BNlbm
        /gFHQd0AdIuO8oUVohE3wh0p/vVMTv0zCwcY7gmMjh+xAxKDdPgqvgk//8bxQ8THLUcFfO0L4LXv
        di1NNiqFhRL5mM7+wpiFeweex4fO7EU36PyyPBgKvqx9Olra3hXzaDXB4TQ2zIxK3I4nQYzRYVIE
        LPHIDZnCnwdYd+WCkTheo8mvxQTC+1T/xc9+zmc0v08qluqnnf0zGS0y+cX++tXL23KCTo8Q3QTr
        Iv3pBbCqp8b8/Fyk9LJKLLjS8/7nh6UjqtYS7CXjyraCfEvHya7Fv/rCsI7HcuomLPz0AF1S30N/
        /b0h7398YtmOr8fBghMfLLzRrQ2fjDKFzeyXMetw0Fu61sIIzn4+4vXWmNIpWVEZlMejZIbcblBv
        54oIl9w7s63yMMPJWR3lTRAkW6bZtdqOaxhFGKFcEWPuF3XnR5vIuySkeGrOkj5owiRDG2wCivL3
        hU8FVwI4MM9n9vw8Y0FD6edHUjC2D31Sh7xGVvGySazv33xCXRLAbUIaM6ux1LnoZ4AuO4ewnRJG
        fJxqvgblKKt4Jeye5fDJ9Duc2PE269eJ//xfhPVJZVaVGqmkWuSAoqTO6bi6rFMa3UBFr6Jd4s7Y
        bvVVccQnpNVSSvzimJWclltPnvtzzNq/Oe9mPoZ+fg6f/etlSKwnzH4V+eldvj5MBhwsqSX7MeHu
        d2OcE6BqtcTf3ReVjO82GeyCTCGWvn+j4Z7XEZQHW6Xy6LJyNJaNAe4WDsQh8qvsf/2Cy2OPiTrn
        6/g11BiWq8Simxl/BiWxGiQXxoFc1U+cDoQGEdxTOyPGzC+ZcdyJMPcDMLLg61LhtLijtcBPTJUm
        oo+6u5KBWpPOdgPFLVfc6xpe0ZtiZxvUc34XEqibYYkPF7i3XCJuAfVj/8SLyby30qwP4GLwCW+6
        YqFPkWlkcDwWjJxeVRHO+dDB1lOdWQ9s9P7XT74GsU1CszH4rEdMORMuLj2u81Ln8GAN2nWlTlda
        dk7HkwDJ73yI118rd2zfjqrcw6glaqZf3VlvJeixfBksmv3xKbW/L1DKaU3srsjdnx8PAmSILkN0
        bBvrhiZIj080+3fXkrfxLQJ1FAw62XVR9tvuoP36n0x9Ng8+/eLjVnx7LCqBxkdzFTfowSPGsGst
        +K//hexOGCiI8RJN3mFtomrSASszfkrh6SsAHqyaON+6ab+zX7QZEssh25Oe6NOJWgaoO29BWe88
        y4kkjgPrOJ2YGpUzP4heGnor0pO+o4yng/dWA+Wf31TAf/3rz5//8ZswqOrb/T0PBvT3sf+P/zMq
        8B/JLfkPUZT+jiHQLinu//z7f08g/PNt6+rb/8++ft0/3T///rOEv7MG//R1n7z/3+v/mm/1X//6
        XwAAAP//AwCxvmnN4CAAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 85464adf4c4509cb-HFA
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 12 Feb 2024 16:43:47 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=B17NmQHCbIOuOTKKXQmpd5esqAhQ8iEnDljyAs8MPY8-1707756227-1-AT9AfoEpoyuydIKRQBk3FSe7hfHiQOCOkup4fg8EptGy1zbDr5n29l8wVUvcSN+/pck3HkSHdwu3C6jvlMThwUE=;
        path=/; expires=Mon, 12-Feb-24 17:13:47 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=XWUfnGDFgEiH5LUEZj1TjkkeBa8XoC5UWhDqmMAZCjE-1707756227048-0-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - text-embedding-ada-002
      openai-organization:
      - traceloop
      openai-processing-ms:
      - '396'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '5000'
      x-ratelimit-limit-tokens:
      - '5000000'
      x-ratelimit-remaining-requests:
      - '4999'
      x-ratelimit-remaining-tokens:
      - '4999973'
      x-ratelimit-reset-requests:
      - 12ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_745cab43c25b4e75772292b02949623a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "davinci-002", "prompt": "Answer the question based on the context
      below.\n\nContext:\npooling approach. Or we can''t use it in its current form.
      Now the solution to this problem was introduced by two people in 2019 Nils Reimers
      and Irenia Gurevich. They introduced what is the first sentence transformer
      or sentence BERT. And it was found that sentence BERT or S BERT outformed all
      of the previous Save the Art models on pretty much all benchmarks. Not all of
      them but most of them. And it did it in a very quick time. So if we compare
      it to BERT, if we wanted to find the most similar sentence pair from 10,000
      sentences in that 2019 paper they found that with BERT that took 65 hours. With
      S BERT embeddings they could create all the embeddings in just around five seconds.
      And then they could compare all those with cosine similarity in 0.01 seconds.
      So it''s a lot faster. We go from 65 hours to just over five seconds which is
      I think pretty incredible. Now I think that''s pretty much all the context we
      need behind sentence transformers. And what we do now is dive into a little
      bit of how they actually work. Now we said before we have the core transform
      models and what S BERT does is fine tunes on sentence pairs using what is called
      a Siamese architecture or Siamese network. What we mean by a Siamese network
      is that we have what we can see, what can view as two BERT models that are identical
      and the weights between those two models are tied. Now in reality when implementing
      this we just use a single BERT model. And what we do is we process one sentence,
      a sentence A through the model and then we process another sentence, sentence
      B through the model. And that''s the sentence pair. So with our cross-linked
      we were processing the sentence pair together. We were putting them both together,
      processing them all at once. This time we process them separately. And during
      training what happens is the weights within BERT are optimized to reduce the
      difference between two vector embeddings or two sentence\n\n---\n\npairs of
      related sentences you can go ahead and actually try training or fine-tuning
      using NLI with multiple negative ranking loss. If you don''t have that fine.
      Another option is that you have a semantic textual similarity data set or STS
      and what this is is you have so you have sentence A here, sentence B here and
      then you have a score from from 0 to 1 that tells you the similarity between
      those two scores and you would train this using something like cosine similarity
      loss. Now if that''s not an option and your focus or use case is on building
      a sentence transformer for another language where there is no current sentence
      transformer you can use multilingual parallel data. So what I mean by that is
      so parallel data just means translation pairs so if you have for example a English
      sentence and then you have another language here so it can it can be anything
      I''m just going to put XX and that XX is your target language you can fine-tune
      a model using something called multilingual knowledge distillation and what
      that does is takes a monolingual model for example in English and using those
      translation pairs it distills the knowledge the semantic similarity knowledge
      from that monolingual English model into a multilingual model which can handle
      both English and your target language. So they''re three options quite popular
      very common that you can go for and as a supervised methods the chances are
      that probably going to outperform anything you do with unsupervised training
      at least for now. So if none of those sound like something\n\n---\n\nWe''re
      going to be focusing on one specific training method which I think is quite
      useful because all it really needs is a reasonably small data set of parallel
      data which is simply translation pairs from a source language like English to
      whichever other language you''re using. So obviously if you are wanting to train
      a sentence transformer in a language that doesn''t really have that much data,
      it''s particularly sentence similarity data, this can be really useful for actually
      taking a high performing, for example, English sentence transformer and transferring
      that knowledge or distilling that knowledge into a sentence transformer for
      your own language. So I think this will be pretty useful for a lot of you. And
      let''s jump straight into it. Before we really get into the whole multilingual
      sentence transformer part of the video, I just want to sort of give an impression
      of what these multilingual sentence transformers are actually doing. So on here
      we can see a single English sentence or brief phrase down at the bottom, I love
      plants, and the rest of these are all in Italian. So what we have here are a
      vector representations of dense vector representations of these phrases. And
      a monolingual sentence transformer, which is most of the sentence transformers,
      will only cope with one language. So we would hope that phrases that have a
      similar meaning end up within the same sort of vector space. So like we have
      for amo lippiante here, and I love plants, these are kind of in the same space.
      A monolingual sentence transformer would do that for similar sentences. So in
      English, we might have I love plants and I like plants, which is actually what
      we have up here. So this here is Italian for I like plants. And we would hope
      that they''re in a similar area, whereas irrelevant or\n\nQuestion: Which training
      method should I use for sentence transformers when I only have pairs of related
      sentences?\nAnswer:", "frequency_penalty": 0, "max_tokens": 400, "presence_penalty":
      0, "stop": null, "temperature": 0, "top_p": 1}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5631'
      content-type:
      - application/json
      cookie:
      - __cf_bm=B17NmQHCbIOuOTKKXQmpd5esqAhQ8iEnDljyAs8MPY8-1707756227-1-AT9AfoEpoyuydIKRQBk3FSe7hfHiQOCOkup4fg8EptGy1zbDr5n29l8wVUvcSN+/pck3HkSHdwu3C6jvlMThwUE=;
        _cfuvid=XWUfnGDFgEiH5LUEZj1TjkkeBa8XoC5UWhDqmMAZCjE-1707756227048-0-604800000
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 1.12.0
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.12.0
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.1
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+xWTWvbQBC9+1cMe3aKlCZS0SWkl0JCA4VACXUx49VY2no1o+6OooSQ/15WduIc
        Cs21oMse9n3MzDu9pwWAcbWpwNiu9yefwm37pftd55+L/Ka8Hq/P7q5uy5t2+HpVnJplYsvmF1lN
        CqUHXVvpek/qhPewDYRKyTEvs7I8L04/ZhPQSU0+yWq8d2zdSZYdHG0rzlI0FfxYAAA8TS/sByQF
        3MkAFhmGSNANXp133AzooceA3pOHGhWXEKlDVmchKRMeXec8BqePB4YEYGpQ3T1BQN45bsBLjB9W
        vOJvA8V0SQXfW1RwEbQlqN12S4HYEmxIRyIGhE5YXpaIxDrBGpDjVkJHAZDrRHu77N94Fyu+5DhS
        qODy36bC/hFGCbsIo9MWhAk8JkFDSxhbCoTxPWOnNJPR3mfi9/5oNucx5zHnMecx5zHnMefxn+Yx
        taupSDmu6cFUkL3+eGn6IJtUunjw/vV/69jFdp3uEk7dyxM32poJf14A/Jwq2xCxIVMdqprpg3S9
        rlV2xMkyz/Nib2mO/fAIn2WHRYyKon+jO8+LRZrzvPgDAAD//wMAqbsSnpoKAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 85464afa898f09cb-HFA
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 12 Feb 2024 16:43:53 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      openai-model:
      - davinci-002
      openai-organization:
      - traceloop
      openai-processing-ms:
      - '2455'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '248232'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 424ms
      x-request-id:
      - req_f9f450bda9e7416a37364525baddcbc0
    status:
      code: 200
      message: OK
version: 1
